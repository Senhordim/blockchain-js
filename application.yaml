apiVersion: v1
kind: Service
metadata:
  name: blockchain-js-ui
  labels:
    run: blockchain-js-ui
spec:
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080
  selector:
    run: blockchain-js-ui
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-js-ui
  labels:
    run: blockchain-js-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      run: blockchain-js-ui
  strategy:
    rollingUpdate:
      maxSurge: 10
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: blockchain-js-ui
    spec:
      containers:
      - name: blockchain-js-ui
        image: eu.gcr.io/blockchain-js/blockchain-js-ui:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-js-core
  labels:
    run: blockchain-js-core
spec:
  ports:
  - name: node-core
    protocol: TCP
    port: 9091
    targetPort: 9091
  selector:
    run: blockchain-js-core
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-js-core
  labels:
    run: blockchain-js-core
spec:
  replicas: 1
  selector:
    matchLabels:
      run: blockchain-js-core
  strategy:
    rollingUpdate:
      maxSurge: 10
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: blockchain-js-core
    spec:
      containers:
      - name: blockchain-js-core
        image: eu.gcr.io/blockchain-js/blockchain-js-core:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9091
          protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-js-front-config
data: 
  nginx.conf: |-
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
      worker_connections  1024;
    }
    http {
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }

        server {
            listen 443 ssl;

            location / {
                proxy_pass http://blockchain-js-ui:8080;
            }

            location /events {
                proxy_pass http://blockchain-js-core:9091/events;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
            }

            server_name         blockchain-js.com;
            ssl_certificate     cert.pem;
            ssl_certificate_key key.pem;
            ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
            ssl_ciphers         HIGH:!aNULL:!MD5;
        }

        server {
            listen 8080;
            location / {
                return 301 https://$host$request_uri;
            }
        }
    }
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blockchain-js-front
  labels:
    run: blockchain-js-front
spec:
  replicas: 1
  selector:
    matchLabels:
      run: blockchain-js-front
  strategy:
    rollingUpdate:
      maxSurge: 10
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: blockchain-js-front
    spec:
      containers:
      - name: blockchain-js-front
        image: nginx
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
          - name: configuration-volume
            subPath: nginx.conf
            mountPath: /etc/nginx/nginx.conf
          - name: certificates
            subPath: cert.pem
            mountPath: /etc/nginx/cert.pem
          - name: certificates
            subPath: key.pem
            mountPath: /etc/nginx/key.pem
      volumes:
        - name: configuration-volume
          configMap:
            name: blockchain-js-front-config
        - name: certificates
          secret:
            secretName: blockchain-js-certificates
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-js-front
  labels:
    run: blockchain-js-front
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  loadBalancerIP: 35.187.182.86
  ports:
  - name: https
    protocol: TCP
    port: 443
    targetPort: 443
  - name: http-redirect
    protocol: TCP
    port: 80
    targetPort: 8080
  selector:
    run: blockchain-js-front
